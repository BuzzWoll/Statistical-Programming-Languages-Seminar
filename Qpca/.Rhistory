knitr::opts_chunk$set(echo = TRUE)
train[,1] = as.POSIXct(train[,1])
load("../Qdataprep/data.RData")
train[,1] = as.POSIXct(train[,1])
end_date = as.POSIXct("2015-01-01")
x = train[train$date < a,]
x = train[train$date < end_date,]
y = x$`S&P500`
pca_data = prcomp(x[,-1],
center = T,
scale. = T)
summary(pca_data)
plot(pca_data, type = "l")
plot(pca_data, type = "l")
summary(pca_data)
plot(pca_data, type = "l")
z = as.matrix(pca_data$rotation[,1])
dat = as.matrix(x[,-1])
View(x)
z = as.matrix(pca_data$rotation[,1:3])
View(z)
dat = as.matrix(x[,-1])
diff_index1 = dat %*% z
View(diff_index1)
a = lm(y ~ diff_index1[,1])
summary(a)
View(x)
a = lm(y ~ diff_index1[,1])
summary(a)
View(z)
pca_data[1:10]
a = lm(y ~ pca_data$rotation[,1])
pca_data$rotation[,1]
z = as.matrix(pca_data$rotation[,1:3])
dat = as.matrix(x[,-1])
View(z)
diff_index1 = dat %*% z
View(diff_index1)
a = lm(y ~ diff_index1[,1])
summary(a)
diff_index1[,1]
plot(pca_data, type = "l")
pca_data = prcomp(x[,-1],
center = T,
scale. = T)
pca_data$rotation[,1:3]
pca_data$rotation[,1:70]
pca_data$rotation[,1:80]
pca_data$rotation[,1:73]
pca_data$rotation[,1:74]
pca_data$rotation[,1:73]
pca_data$rotation[,1]
length(pca_data$rotation[,1])
View(x)
pca_data
BIC()
```{r setup, include=FALSE}
knitr::opts_chunk$set(echo = TRUE)
train[,1] = as.POSIXct(train[,1])
load("../Qdataprep/data.RData")
load("../Qdataprep/data.RData")
load("../Qprepare/prepareddata.RData")
View(train)
train[,1] = as.POSIXct(train[,1])
end_date = as.POSIXct("2015-01-01")
x = train[train$date < end_date,]
y = x$`S&P500`
pca_data = prcomp(x[,-1],
center = T,
scale. = T)
summary(pca_data)
plot(pca_data, type = "l")
z = as.matrix(pca_data$rotation[,1:3])
z
dat = as.matrix(x[,-1])
x = as.matrix(x[,-1])
diff_index1 = x %*% z
diff_index1
a = lm(y ~ diff_index1[,1])
summary(a)
a = lm(y ~ diff_index1[,1] diff_index1[,2])
a = lm(y ~ diff_index1[,1] + diff_index1[,2])
summary(a)
a = lm(y ~ diff_index1[,1] + diff_index1[,3])
summary(a)
z = as.matrix(pca_data$rotation[,1:10])
x = as.matrix(x[,-1])
diff_index = x %*% z
z = as.matrix(pca_data$rotation[,1:10])
x = as.matrix(x[,-1])
diff_index = x %*% z
View(x)
z = as.matrix(pca_data$rotation[,1:3])
x = as.matrix(x[,-1])
diff_index = x %*% z
z = as.matrix(pca_data$rotation[,1:3])
x = as.matrix(x[,-1])
diff_index1 = x %*% z
z = as.matrix(pca_data$rotation[,1:3])
dat = as.matrix(x[,-1])
diff_index1 = dat %*% z
load("../Qprepare/prepareddata.RData")
train[,1] = as.POSIXct(train[,1])
end_date = as.POSIXct("2015-01-01")
x = train[train$date < end_date,]
y = x$`S&P500`
pca_data = prcomp(x[,-1],
center = T,
scale. = T)
summary(pca_data)
plot(pca_data, type = "l")
z = as.matrix(pca_data$rotation[,1:3])
dat = as.matrix(x[,-1])
diff_index1 = dat %*% z
x = as.matrix(x[,-1])
diff_index1 = dat %*% z
diff_index1 = x %*% z
diff_index = x %*% z
a = lm(y ~ diff_index[,1] + diff_index[,2]+ diff_index[,3]+ diff_index[,4]+ diff_index[,5])
a = lm(y ~ diff_index[,1] + diff_index[,2]+ diff_index[,3])
summary(a)
z = as.matrix(pca_data$rotation[,1:5])
x = as.matrix(x[,-1])
diff_index = x %*% z
load("../Qprepare/prepareddata.RData")
train[,1] = as.POSIXct(train[,1])
end_date = as.POSIXct("2015-01-01")
x = train[train$date < end_date,]
y = x$`S&P500`
pca_data = prcomp(x[,-1],
center = T,
scale. = T)
summary(pca_data)
plot(pca_data, type = "l")
z = as.matrix(pca_data$rotation[,1:5])
x = as.matrix(x[,-1])
diff_index = x %*% z
a = lm(y ~ diff_index[,1] + diff_index[,2]+ diff_index[,3])
a = lm(y ~ diff_index[,1] + diff_index[,2]+ diff_index[,3] + diff_index[,4] + diff_index[,5])
summary(a)
summary(pca_data)
plot(pca_data, type = "l")
z = as.matrix(pca_data$rotation[,1:10])
x = as.matrix(x[,-1])
diff_index = x %*% z
diff_index = 0#x %*% z
diff_index = x %*% z
load("../Qprepare/prepareddata.RData")
train[,1] = as.POSIXct(train[,1])
end_date = as.POSIXct("2015-01-01")
x = train[train$date < end_date,]
y = x$`S&P500`
pca_data = prcomp(x[,-1],
center = T,
scale. = T)
summary(pca_data)
plot(pca_data, type = "l")
z = as.matrix(pca_data$rotation[,1:10])
x = as.matrix(x[,-1])
diff_index = x %*% z
a = lm(y ~ diff_index[,1] + diff_index[,2]+ diff_index[,3] + diff_index[,4] + diff_index[,5])
summary(a)
a = lm(y ~ diff_index[,1] + diff_index[,2]+ diff_index[,3] + diff_index[,4] + diff_index[,5] + diff_index[,6] + diff_index[,7] + diff_index[,8])
summary(a)
a = lm(y ~ 0+  diff_index[,1] + diff_index[,2]+ diff_index[,3] + diff_index[,4] + diff_index[,5] + diff_index[,6] + diff_index[,7] + diff_index[,8], cons)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,2]+ diff_index[,3] + diff_index[,4] + diff_index[,5] + diff_index[,6] + diff_index[,7] + diff_index[,8], cons)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,2]+ diff_index[,3] + diff_index[,4] + diff_index[,5] + diff_index[,6] + diff_index[,7] + diff_index[,8])
summary(a)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,2]+ diff_index[,3] + diff_index[,4] + diff_index[,5] + diff_index[,6] + diff_index[,7])
summary(a)
BIC(a)
a = lm(y ~ 0 + diff_index[,1] )#+ diff_index[,2]+ diff_index[,3] + diff_index[,4] + diff_index[,5] + diff_index[,6] + diff_index[,7])
summary(a)
BIC(a)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,2])# + diff_index[,3] + diff_index[,4] + diff_index[,5] + diff_index[,6] + diff_index[,7])
summary(a)
BIC(a)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,2] + diff_index[,3])# + diff_index[,4] + diff_index[,5] + diff_index[,6] + diff_index[,7])
summary(a)
BIC(a)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,2] + diff_index[,3] + diff_index[,4])# + diff_index[,5] + diff_index[,6] + diff_index[,7])
summary(a)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,3] + diff_index[,4])# + diff_index[,5] + diff_index[,6] + diff_index[,7])
summary(a)
BIC(a)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,3] + diff_index[,4] + diff_index[,5])# + diff_index[,6] + diff_index[,7])
summary(a)
BIC(a)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,3] + diff_index[,4])# + diff_index[,5] + diff_index[,6] + diff_index[,7])
BIC(a)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,3] + diff_index[,4] + diff_index[,5] + diff_index[,6])# + diff_index[,7])
summary(a)
BIC(a)
summary(a)
BIC(a)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,3] + diff_index[,4] + diff_index[,6])# + diff_index[,7])
BIC(a)
summary(a)
BIC(a)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,3] + diff_index[,4])# + diff_index[,6])# + diff_index[,7])
BIC(a)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,3] + diff_index[,4] + diff_index[,6])# + diff_index[,7])
BIC(a)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,3] + diff_index[,4] + diff_index[,5] + diff_index[,6])# + diff_index[,7])
BIC(a)
a = lm(y ~ 0 + diff_index[,1] + diff_index[,3] + diff_index[,4] + diff_index[,5] + diff_index[,6] + diff_index[,7])
BIC(a)
summary(a)
library("MASS")
a = lm(y ~ 0 + diff_index[,1] + diff_index[,2] + diff_index[,3] + diff_index[,4] + diff_index[,5] + diff_index[,6] + diff_index[,7]+ diff_index[,8] + diff_index[,9] + diff_index[,10])
stepAIC(a)
stepAIC(a, direction = "lower")
stepAIC(a, direction = "backward")
b <- lm(formula = y ~ diff_index[, 1] + diff_index[, 2] + diff_index[,
3] + diff_index[, 4] + diff_index[, 5] + diff_index[, 6] +
diff_index[, 7] + diff_index[, 9] + diff_index[, 10] - 1)
summary(b)
step(a, direction = "backward")
a = lm(y ~ 0 + lag(diff_index[,1],1) + lag(diff_index[,2],1) + lag(diff_index[,3],1))
summary(a)
a = lm(y ~ 0 + lag(diff_index[,1],1) + lag(diff_index[,2] +diff_index[,3],1))
summary(a)
a = lm(y ~ 0 + lag(diff_index[,1],1) + lag(diff_index[,2],1) + lag(diff_index[,3],1) + lag(diff_index[,4],1) + lag(diff_index[,5],1) + lag(diff_index[,6],1) + lag(diff_index[,7],1) + lag(diff_index[,8],1) + lag(diff_index[,9],1) + lag(diff_index[,10],1))
summary(a)
step(a, direction = "backward")
b <- step(a, direction = "backward")
step(b, direction = "backward")
c <- step(b, direction = "backward")
step(c, direction = "backward")
b = lm(y ~ o + lag(y,1) + lag(y, 2) + lag(y,3))
b = lm(y ~ o + lag(y,1) + lag(y,2) + lag(y,3))
b = lm(y ~ 0 + lag(y,1) + lag(y,2) + lag(y,3))
summary(b)
b = lm(y ~ 0 + lag(y,1))
summary(b)
b = lm(y ~ 0 + lag(y,2))
summary(b)
plot(y)
abline(b)
plot(y)
abline(b)
plot(y)
plot(y, line = b)
plot(y, b)
plot(y)
abline(lm(y ~ 0 + lag(y,2)))
abline(lm(y ~ 0 + lag(y,1)))
plot(y)
abline(lm(y ~ 0 + lag(y,1)))
plot(y)
plot(y)
lines(lm(y ~ 0 + lag(y,1)))
plot(y)abline(lm(y ~ 0 + lag(y,1)))
abline(lm(y ~ 0 + lag(y,1)))}
abline(lm(y ~ 0 + lag(y,1)))}
{plot(y)+
abline(lm(y ~ 0 + lag(y,1)))}
plot(y)+
abline(lm(y ~ 0 + lag(y,1)))
plot(y) + abline(lm(y ~ 0 + lag(y,1)))
summary(y)
plot(y) + abline(lm(y ~ 0 + lag(y,1)))
plot(y) + abline(lm(y ~ 0 + lag(y,1)))
x = train[train$date < end_date,]
train[,1] = as.POSIXct(train[,1])
x = train[train$date < end_date,]
plot(y,x[,1]) + abline(lm(y ~ 0 + lag(y,1)))
plot(x[,1],y) + abline(lm(y ~ 0 + lag(y,1)))
plot(x[,1],y, type = "l") + abline(lm(y ~ 0 + lag(y,1)))
plot(x[,1],y, type = "l") + abline(lm(y ~ 0 + lag(y,1)), col="red")
plot(x[,1],y, type = "l") + abline(lm(y ~ 0 + lag(y,2)), col="red")
plot(x[,1],y, type = "l") + abline(b, col="red")
b = lm(y ~ 0 + lag(y,2))
summary(b)
b = ar(y,)
b = ar(y, 2)
summary(b)
b = ar(y, aic=T)
summary(b)
b
b = ar(y, aic=T, method = "ols")
b
b = lm(y ~ 0 + lag(y, -1))
summary(b)
b = lm(y ~ 0 + lag(y, -10))
summary(b)
b = lm(y ~ 0 + y)
b = lm(y ~ 0 + y)
b = lm(y ~ 0 + lag(y,1))
b = arima(y, c(1,0,0)) # lm(y ~ 0 + lag(y,1))
summary(b)
b
load("C:/Users/Lorenz/Documents/GitHub/statproglang/Qload/data.RData")
load("../Qload/data.RData")
load("../Qprepare/prepareddata.RData")
load("../Qload/data.RData")
load("../Qprepare/prepareddata.RData")
load("../Qload/data.RData")
load("../Qload/data.RData")
dat <- load("../Qprepare/prepareddata.RData")
View(train)
sp_old <- train$`S&P500`
load("../Qprepare/prepareddata.RData")
sp_new <- train$`S&P500`
summary(sp_old)
summary(sp_new)
load("../Qprepare/prepareddata.RData")
train[,1] = as.POSIXct(train[,1])
end_date = as.POSIXct("2015-01-01")
x = train[train$date < end_date,]
y = x$`S&P500`
pca_data = prcomp(x[,-1],
center = T,
scale. = T)
summary(pca_data)
plot(pca_data, type = "l")
z = as.matrix(pca_data$rotation[,1:10])
x = as.matrix(x[,-1])
diff_index = x %*% z
a = lm(y ~ 0 + lag(diff_index[,1],-1) + lag(diff_index[,2],-1) + lag(diff_index[,3],-1) + lag(diff_index[,4],-1) + lag(diff_index[,5],-1) + lag(diff_index[,6],-1) + lag(diff_index[,7],-1) + lag(diff_index[,8],-1) + lag(diff_index[,9],-1) + lag(diff_index[,10],-1))
b = arima(y, c(1,0,0)) # lm(y ~ 0 + lag(y,1))
b
summary(a)
b = lm(y ~ 0 + lag(y,12))
b
summary(b)
top(y)
y[1:10]
View(train)
knitr::opts_chunk$set(echo = TRUE)
library(httr)
library(jsonlite)
#getting macroeconomic data from FRED
getJsonData = function(x){
connection = "https://api.stlouisfed.org/fred/series/observations?"
api_key = "&api_key=4c5743e8fb183ff3f7f47ba1ae651683&"
file_type = "file_type=json&"
observation_start="observation_start=1992-02-01&"
observation_end="observation_end=2017-01-01"
series_id=paste("series_id=",x,sep="")
fromJSON(paste(connection,series_id,api_key,file_type,observation_start,observation_end, sep = ""))
}
#create time series with multiple dimensions
createFeatureMatrix = function(x){
res = getJsonData(x[1])$observations[c("date","value")]
res$value = as.numeric(res$value)
res$date = as.Date(res$date)
colnames(res) = c("date",x[1])
for(i in x[2:length(x)]){
tmp = getJsonData(i)
res[i]=as.numeric(tmp$observations$value)
}
res
}
#calculates the change, adds a zero in the front to keep vector length
getVectorPercentageChange = function(x){
c(0,(diff(x,lag = 1)/x[1:length(x)-1]))
}
series_ids = unlist(read.csv("frednametags.csv",stringsAsFactors = FALSE))
train = createFeatureMatrix(series_ids)
train["GDAXI"] = read.csv("^GDAXI.csv")$Adj.Close
train["HSI"] = read.csv("^HSI.csv")$Adj.Close
train["N225"] = read.csv("^N225.csv")$Adj.Close
train["S&P500"] = read.csv("sandp500.csv")$Adj.Close
train[,-1] = apply(train[,-1],2,getVectorPercentageChange)
save(train, file="data.RData")
View(train)
knitr::opts_chunk$set(echo = TRUE)
load("../Qload/data.RData")
boxplot(train[,-1])
boxplot.stats(train[,29])$out
boxplot.stats(train[,43])$out
colnames(train)[29]
colnames(train)[43]
colnames(train)[29]
colnames(train)[43]
boxplot.stats(train[,43])$out
boxplot(train[,-1])
boxplot(train[,c("FRBLMCI","MEDCPIM158SFRBCLE")])
train[train$FRBLMCI %in% boxplot.stats(train[,29])$out & (train$FRBLMCI>8 | train$FRBLMCI<(-8)) ,c("date","FRBLMCI")]
View(train)
unscaled_train = train
scaledtrain = scale(train[,-1])
train[,-1] = scaledtrain
scaledtrain = train
save(scaledtrain, file="prepareddataSC.RData")
save(unscaled_train, file = "prepareddata.RData")
